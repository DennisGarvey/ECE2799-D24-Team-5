/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "ECE2799-D24 Team 5_menu.h"
#include "ThemeCoolBlueTraditional.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Personal Light Monitor", "daba275b-c0d1-4690-906c-7184f572ebaa" };

Adafruit_ST7789 gfx(42, 40, 35, 36, 41);
AdafruitDrawable gfxDrawable(&gfx, 0);
GraphicsDeviceRenderer renderer(30, applicationInfo.name, &gfxDrawable);

// Global Menu Item declarations
const PROGMEM AnyMenuInfo minfoTurnOff = { "Turn Off", 18, 0xffff, 0, onTurnOff };
ActionMenuItem menuTurnOff(&minfoTurnOff, nullptr, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoOptionsDemoMode = { "Demo Mode", 17, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuOptionsDemoMode(&minfoOptionsDemoMode, false, nullptr, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoOptionsAmbientLightOptionsAlerts = { "Alerts", 8, 16, 1, NO_CALLBACK, NAMING_YES_NO };
BooleanMenuItem menuOptionsAmbientLightOptionsAlerts(&minfoOptionsAmbientLightOptionsAlerts, false, nullptr, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoOptionsAmbientLightOptions = { "Ambient Light", 7, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackOptionsAmbientLightOptions(&minfoOptionsAmbientLightOptions, &menuOptionsAmbientLightOptionsAlerts, INFO_LOCATION_PGM);
SubMenuItem menuOptionsAmbientLightOptions(&minfoOptionsAmbientLightOptions, &menuBackOptionsAmbientLightOptions, &menuOptionsDemoMode, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoOptionsSunscreenOptionsReminderInterval = { "Reminder Interval", 14, 0xffff, 290, onSunscrnRmdrIntvlChange, 10, 1, "min" };
AnalogMenuItem menuOptionsSunscreenOptionsReminderInterval(&minfoOptionsSunscreenOptionsReminderInterval, 110, nullptr, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoOptionsSunscreenOptionsSunscreenReminder = { "Sunscreen Reminder", 5, 13, 1, onSunscreenReminderToggle, NAMING_ON_OFF };
BooleanMenuItem menuOptionsSunscreenOptionsSunscreenReminder(&minfoOptionsSunscreenOptionsSunscreenReminder, false, &menuOptionsSunscreenOptionsReminderInterval, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoOptionsSunscreenOptionsSPFLevel = { "SPF Level", 6, 14, 100, onSPFUpdate, 0, 1, "" };
AnalogMenuItem menuOptionsSunscreenOptionsSPFLevel(&minfoOptionsSunscreenOptionsSPFLevel, 0, &menuOptionsSunscreenOptionsSunscreenReminder, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoOptionsSunscreenOptions = { "Sunscreen", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackOptionsSunscreenOptions(&minfoOptionsSunscreenOptions, &menuOptionsSunscreenOptionsSPFLevel, INFO_LOCATION_PGM);
SubMenuItem menuOptionsSunscreenOptions(&minfoOptionsSunscreenOptions, &menuBackOptionsSunscreenOptions, &menuOptionsAmbientLightOptions, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoOptionsFitzpatrickType = { "Fitzpatrick Type", 16, 0xffff, 5, onFitzpatrickValueUpdate, 1, 1, "" };
AnalogMenuItem menuOptionsFitzpatrickType(&minfoOptionsFitzpatrickType, 0, &menuOptionsSunscreenOptions, INFO_LOCATION_PGM);
const PROGMEM SubMenuInfo minfoOptions = { "Options", 2, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackOptions(&minfoOptions, &menuOptionsFitzpatrickType, INFO_LOCATION_PGM);
SubMenuItem menuOptions(&minfoOptions, &menuBackOptions, &menuTurnOff, INFO_LOCATION_PGM);
const PROGMEM AnyMenuInfo minfoBattery = { "Battery", 1, 4, 0, NO_CALLBACK };
TextMenuItem menuBattery(&minfoBattery, "BATTERY%", 5, &menuOptions, INFO_LOCATION_PGM);
const PROGMEM BooleanMenuInfo minfoDismissAlert = { "Dismiss Alert", 11, 0xffff, 1, onDismissAlert, NAMING_CHECKBOX };
BooleanMenuItem menuDismissAlert(&minfoDismissAlert, false, &menuBattery, INFO_LOCATION_PGM);
const char enumStrActiveAlert_0[] PROGMEM = "None";
const char enumStrActiveAlert_1[] PROGMEM = "UV Exposure";
const char enumStrActiveAlert_2[] PROGMEM = "Ambient Light";
const char enumStrActiveAlert_3[] PROGMEM = "Reapp Snscrn";
const char* const enumStrActiveAlert[] PROGMEM  = { enumStrActiveAlert_0, enumStrActiveAlert_1, enumStrActiveAlert_2, enumStrActiveAlert_3 };
const PROGMEM EnumMenuInfo minfoActiveAlert = { "Active Alert", 12, 19, 3, NO_CALLBACK, enumStrActiveAlert };
EnumMenuItem menuActiveAlert(&minfoActiveAlert, 0, &menuDismissAlert, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoMinUntilNextRmdr = { "Min Until Next Rmdr", 15, 0xffff, 3000, NO_CALLBACK, 0, 10, "" };
AnalogMenuItem menuMinUntilNextRmdr(&minfoMinUntilNextRmdr, 0, &menuActiveAlert, INFO_LOCATION_PGM);
const PROGMEM AnalogMenuInfo minfoCurrentUVIndex = { "Current UV Index", 9, 17, 110, NO_CALLBACK, 0, 10, "" };
AnalogMenuItem menuCurrentUVIndex(&minfoCurrentUVIndex, 0, &menuMinUntilNextRmdr, INFO_LOCATION_PGM);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    setSizeBasedEEPROMStorageEnabled(true);
    // Now add any readonly, non-remote and visible flags.
    menuCurrentUVIndex.setReadOnly(true);
    menuMinUntilNextRmdr.setReadOnly(true);
    menuActiveAlert.setReadOnly(true);
    menuBattery.setReadOnly(true);
    menuMinUntilNextRmdr.setVisible(false);
    menuOptionsSunscreenOptionsSPFLevel.setStep(10);
    menuOptionsSunscreenOptionsReminderInterval.setStep(10);

    // Code generated by plugins and new operators.
    gfx.init(135, 240);
    gfx.setRotation(3);
    renderer.setUpdatesPerSecond(5);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, false);
    menuMgr.initForUpDownOk(&renderer, &menuCurrentUVIndex, 2, 17, 1, 20);
    renderer.setTitleMode(BaseGraphicalRenderer::TITLE_FIRST_ROW);
    renderer.setUseSliderForAnalog(true);
    installCoolBlueTraditionalTheme(renderer, MenuFontDef(nullptr, 1), MenuFontDef(nullptr, 1), false);
}

